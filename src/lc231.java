/*
 * @lc app=leetcode.cn id=231 lang=java
 *
 * [231] 2的幂
 * 
 * 题意：判断一个整数是否是2的幂
 * 
 * 思路：
 * 1：&运算，return (n > 0) && (n & -n) == n;
 *    2的幂次方在二进制下，只有1位是1，其余全是0。例如:8---00001000。
 *    负数的在计算机中二进制表示为补码(原码->正常二进制表示，原码按位取反(0-1,1-0)，最后再+1
 *    然后两者进行与操作，得到的肯定是原码中最后一个二进制的1。例如8&(-8)->00001000 & 11111000 得 00001000，即8
 *          return (n > 0) && (n & (n - 1)) == 0;
 *    从二进制上看，2的幂一定是这样的形式：整个二进制数上只有一位是1，其他位全是0；
 *   （如果有两个1，一定不是2的幂）此时，n-1的二进制数一定会是当前位变为0，其他位全是1，这样n与n-1操作，就会是0；
 * 2：移位运算：把二进制数进行左右移位。左移1位，扩大2倍；右移1位，缩小2倍。 return (n>0) && (1<<30) % n == 0;
 *    1<<30得到最大的2的整数次幂，对n取模如果等于0，说明n只有因子2。
 */
class Solution {
    public boolean isPowerOfTwo(int n) {
        return (n > 0) && (n & (n - 1)) == 0;
    }
}

